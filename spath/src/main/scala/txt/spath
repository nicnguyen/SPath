package spath

trait SPath[T <: AnyRef] extends QueryExpression[T] with LltAlgorithm[T] {

  def parent: axis
  def children: T => IndexedSeq[T]

  override def defaultAxis = children

  def ?(p: predicate) = Predicate(p)

  val leftSibling : axis = n => sibling(position(n) - 1)(n)
  val rightSibling : axis = n => sibling(position(n) + 1)(n)

  val self : axis = n => List(n)
  val child = children
  val previousSibling = $(\(leftSibling)\\leftSibling)
  val followingSibling = $(\(followingSibling)\\followingSibling)
  val ancestorOrSelf = $(\\(parent))
  val descendantOrSelf = $(\\(child))
  val ancestor = $(\(parent)\\parent)
  val descendant = $(\(child)\\child)
  val following = $(\\(parent)\rightSibling\\rightSibling\\child)
  val previous = $(\\(parent)\leftSibling\\leftSibling\\child)

  def root : Predicate = ?(n => parent(n).size == 0)
  def ~\\ (e : Query)= \\(parent, root)\\e
  def ~\ (e : Query)= \\(parent, root)\e

  def $(n : T, e: Query) : Iterable[T] = $(e)(n)

  def $(e: Query) : T => Iterable[T] = {
    if (!SPath(e))
      throw new Exception("SPath expression contains branching conflicts.")
    (o:T) => {
      val r = evaluate(e)(o);
      if (depth == 0) documentOrder(r, o)
      else r
    }
  }

  override def not = (e : Query) => ?(n => $(n, e).size == 0)
  override def exists = (e : Query) => ?(n => $(n, e).size > 0)
}
